#+OPTIONS: toc:nil
#+DESCRIPTION: This file is for recording what I do every day during the project.
* <2017-12-11 Mon>
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter1]]
Knew some important conceptions.
* <2017-12-12 Tue>
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter2]]
*** Reviewed the grammar of verilog.
*** Question: Why does rom[1] have to be 32'h01010101?
It's just an input which represents an instruction, and you can input whatever you want as long as it is a 32-bit hexadecimal.
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter3]]
*** Finally I began to know the outline of what I needed to do. Especially [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf::68][Figure 3-5 on Page 54]].
*** Question: What does the time signal "clk" do?
Kaiyi Zhang told me that I could regard it as a tool to out put the time signal to debug, and it fuctions like a stage.
*** Question: What does the reset signal "rst" do?
Kaiyi Zhang told me that I could use the signal to reset the module for stopping some process.
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter4]]
*** Question: After I implement the ori module, how could I combine the module with the other to make the CPU complete?
First, I thought I could use a big module with many "if", and a spceific instruction corresponds with a specific module. But Kaiyi Zhang told me it was too complex. I should just combine all similar fuctions in a single module. An example for this is ALU, which can deal with all operations.
*** An problem from Kaiyi Zhang(On [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf::111][数据前推处理load指令]]): When you read or write a memory or address, you have 2 stages' latency, which requires you to keep the read/write signal streamming.
*** The standard codes didn't pass compilation on my computer. 
* <2017-12-13 Wed>
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter4]]
*** Implemented the instruction ORI.
I could try to implement the ori code myself referring to the standard codes on [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter4]], which is simplest, and after that, what I need to do is to supplement some codes. 
**** Problems in my codes:
+ Codes passed compilation, but took about 10 minutes.
+ Codes couldn't run normally. [[file:Picture/2017-12-14%2001-19-40%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png][
Screenshot while Running]]
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter5]]
*** Knew what kind of problems I would meet in the future.
