#+AUTHOR: Lmxyy
#+OPTIONS: ^:nil
#+DESCRIPTION: This file is for recording what I do every day during the project.
* <2017-12-11 Mon>
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter 1]]
Knew some important conceptions.
* <2017-12-12 Tue>
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter 2]]
*** Reviewed the syntax of verilog.
*** Question: Why does rom[1] have to be 32'h01010101?
It's just an input which represents an instruction, and you can input whatever you want as long as it is a 32-bit hexadecimal.
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter 3]]
*** Finally I began to know the outline of what I needed to do. Especially [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf::68][Figure 3-5 on Page 54]].
*** Question: What does the time signal "clk" do?
Kaiyi Zhang told me that I could regard it as a tool to out put the time signal to debug, and it fuctions like a stage.
*** Question: What does the reset signal "rst" do?
Kaiyi Zhang told me that I could use the signal to reset the module for stopping some process.
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter 4]]
*** Question: After I implement the ori module, how could I combine the module with the other to make the CPU complete?
First, I thought I could use a big module with many "if", and a spceific instruction corresponds with a specific module. But Kaiyi Zhang told me it was too complex. I should just combine all similar fuctions in a single module. An example for this is ALU, which can deal with all operations.
*** An problem from Kaiyi Zhang(On [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf::111][Use data forwarding to deal with load instructions]]): When you read or write a memory or address, you have 2 stages' latency, which requires you to keep the read/write signal streamming.
*** The standard codes didn't pass compilation on my computer. 
* <2017-12-13 Wed>
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter4]]
*** Implemented the instruction ORI.
I could try to implement the ori code myself referring to the standard codes on [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter 4]], which is simplest, and after that, what I need to do is to supplement some codes.
**** I learnt how to use macros like fuctions in verilog. 
**** Problems in my codes:
+ Codes passed compilation, but took about 10 minutes.
+ Codes couldn't run normally.
 [[file:Picture/2017-12-14%2001-19-40%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png][Screenshot while Running]]
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter 5]]
*** Knew what kind of problems I would meet in the future.
* <2017-12-14 Thu>
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter 4]]
*** Made my codes run normally with Kaiyi Zhang's help.
[[file:Picture/2017-12-14%2020-46-57%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png][Screenshot]]
****  Modified the depth of "inst_mem" in [[file:Source/Chapter%204/inst_rom.v::13][inst_rom.v]] from `InstMemNum-1 to 3. 
Not only I didn't had the warning "Not enough words in the file" as the fuction ~$readmemh~ would read the depth of "inst_mem" hexadecimal numbers in [[file:Source/Chapter%204/inst_rom.data][inst_rom.data]], but also the time for compilation was much shortened.
**** Changed the function ~$stop~ in [[file:Attempt/Chapter%204/openmips_min_sopc_tb.v][openmips_min_sopc_tb.v]] to ~$finish~ so that VVP could be dismissed and also added the timescale in  [[file:Source/Chapter%204/openmips_min_sopc_tb.v:5][openmips_min_sopc_tb.v]].
*** Question: Why did my data flush so slowly?
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter 5]]
*** Added data forwarding.
*** Transformed my instruction sets from mips to risc-v.
* <2017-12-15 Fri>
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter 5]]
*** Added instructions: AND ANDI OR XOR XORI LUI SLL SLLI SRA SRAI SRL SRLI. But all were to be tested.
*** Question: How did ~shiftres <= ({32{reg2_i[31]}} << (6'd32-{1'b0, reg1_i[4:0]}))| reg2_i >> reg1_i[4:0];~ implemented arithmetic left shift?
* <2017-12-16 Sat>
** Tested all the logic instructions.
** Downloaded the [[https://github.com/riscv/riscv-gnu-toolchain][GNU toolchain for RISC-V, including GCC(Newlib)]](this could helpe you generate test instructions) but failed.
* <2017-12-17 Sun>
** Installed the gun risc toolchain for almost all day.
*** Clone the toolchain locally.
**** If you could climb over the wall:
Run the following codes:
#+BEGIN_SRC sh
  $ git clone --recursive https://github.com/riscv/riscv-gnu-toolchain
#+END_SRC
or alternatively:
#+BEGIN_SRC sh
  $ git clone https://github.com/riscv/riscv-gnu-toolchain
  $ cd riscv-gnu-toolchain
  $ git submodule update --init --recursive
#+END_SRC
The source codes are somewhat large, please wait patiently.
**** If you couldn't climb over the wall:
Download the package at [[https://jbox.sjtu.edu.cn/link/view/8971e3226df74d35b2dcbe588397958f]](Provided by Zhanghao Wu). Remember to depackage with the command:
#+BEGIN_SRC sh
  tar -zxvf riscv-gnu-toolchain.tar.gz
#+END_SRC
If you use git directly, maybe you couldn't clone all source codes which may cause that your toolchain cannot work normally.
*** Make the source code.
Run the following command to get riscv32.
#+BEGIN_SRC sh
  sudo ./configure --prefix=/opt/riscv --with-arch=rv32gc --with-abi=ilp32d
  sudo make
#+END_SRC
*** Modify your path variable.
First run the command
#+BEGIN_SRC sh
  sudo gedit /etc/profile
#+END_SRC
Then add
#+BEGIN_SRC sh
  export PATH="$PATH:/opt/riscv/bin"
#+END_SRC
Next, reboot or logout.
*** Tranform the assembler to riscv instructions.
Use the following command

#+BEGIN_SRC sh
  if [ $# -eq 0 ]; then
      riscv32-unknown-elf-as -o instr.o -march=rv32i instr.s 
      riscv32-unknown-elf-ld instr.o -o instr.om
      riscv32-unknown-elf-objcopy -O binary instr.om instr.bin
      ../Tools/Bin_to_Text instr.bin > instr.data
      cat instr.data
      rm instr.o instr.om instr.bin    
  elif [ $# -eq 1 ]; then
      riscv32-unknown-elf-as -o $1.o -march=rv32i $1.s 
      riscv32-unknown-elf-ld $1.o -o $1.om
      riscv32-unknown-elf-objcopy -O binary $1.om $1.bin
      ../Tools/Bin_to_Text $1.bin > instr.data
      cat instr.data
      rm $1.o $1.om $1.bin
  else
      echo "Please input less than 2 paraments!"
  fi
#+END_SRC
which was included in [[file:Tools/get_instr.sh][get_instr.sh]]. You need run the bash with exactly one parament which shows that your assembler source code's name is "$1.s". And you will get an file named instr.data which contains your hexadecimal riscv32 instructions. Attention: Please modify the path of ~Bin_to_Text~ according to your current directory.
** Tried to transform a binary file to a text file.
The source code was [[file:Tools/Bin_to_Text.cpp][Bin_to_Text.cpp]].

#+BEGIN_SRC C++
  #include<cstring>
  #include<iomanip>
  #include<cstdio>
  #include<cstdlib>
  #include<algorithm>
  #include<iostream>
  #include<fstream>
  using namespace std;

  typedef long long ll;
  const int NSIZE = 8;

  inline ll convert(ll num)
  {
      ll a[4] = {0,0,0,0},ret = 0;
      for (int i = 0;i < 4;++i,num >>= 8)
          a[i] = num&((1<<8)-1);
      for (int i = 0;i < 4;++i)
          ret = (ret<<8)|a[i];
      return ret;
  }

  int main(int argc,char *argv[])
  {
      if (argc == 1||argc > 2)
      {
          cerr << "Please input an binary file." << endl;
          return 0;
      }
      ifstream ifile(argv[1],ios::in|ios::binary);
      if (!ifile)
      {
          cerr << "Cannot open file." << endl;
          return 0;
      }
      int head = ifile.tellg(),tail = (ifile.seekg(0,ios::end)).tellg();
      ifile.seekg(0,ios::beg);
      int N = (tail-head)/4;
      while (N--)
      {
          ll num = 0; int now = 0;
          for (int k = 0;k < 4;++k)
          {
              char c; ifile.read((char *)&c,sizeof(char));
              for (int i = 0;i < NSIZE;++i,c >>= 1)
                  num |= ((ll)(c&1))<<(now++);
          }
          cout.width(8); cout.fill('0');
          cerr.width(8); cerr.fill('0');
          cout << hex << convert(num) << endl;
          cerr << hex << num << endl;
      }
      cerr << "Congratulations, convert successfully!." << endl;
      return 0;
  }
#+END_SRC
** Question: How to write riscv assembler correctly?
* <2017-12-18 Mon>
** Tested all the shift instructions.
** Read [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写CPU》 Chapter 7]]
Implemented the arithmetic instructions, but still had some bugs.
** Listed the format of all instructions that I had implemented in [[file:README.org::Format%20of%20Riscv32%20Assembler][README.org]].
* <2017-12-19 Tue>
** Arithmetic instructions passed tests.
* <2017-12-20 Wed>
** Read [[file:Document/Branch%20Prediction.pdf][Branch Prediction.pdf]] and [[file:Document/%E3%80%8A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99CPU%E3%80%8BP1-300.pdf][《自己动手写cpu》 Chapter 8 and 9]]
*** Knew a little about jump and branch instructions and load and store instructions.
*** Learned how to make branch prediction dynamicly.
*** Question: Where did the alloyed branch predictor show instruction address?
* <2017-12-21 Thu>
** Improved my prediction assumption.
*** Some Questions: 
+ How could I know whether my stages take the same time to execute?
+ Where should I put the prediction?
+ It seemed that Branch Target Table was of no use in my assumption, was it?
* <2017-12-22 Fri>
** Implemented Jump Instructions(Only passed complilation, to be tested)
** Added a control centre to control and stop the pipeline.
* <2017-12-23 Sat>
** Tried to improve my [[file:Tools/get_instr.sh][get_instr.sh]] but failed.
** Convinced that my Jump Instructions had bugs.
* <2017-12-24 Sun>
** Tested ~JAL~ instructions.
** Implemented all branch instruction.
** Tried to implement branch prediction.
* <2017-12-25 Mon>
** Found that I didn't use sign-extension. I just use unsigned-extension.
* <2017-12-26 Tue>
Knew how to implement cache.
* <2018-01-02 Tue>
** Just added sign-extension.
* <2018-01-03 Wed>
** Fixed my lui instruction.
** Added the auipc instruction.
** Added ~Load and Store~ instructions.
** Some bugs about ~Load and Store~.
* <2018-01-04 Thu>
** All instrucionts could execute normally.
** Learnt the UART-USB protocol, but still could figure it out totally.
*** Knew the rules at [[https://www.cnblogs.com/huanzxj/p/4522274.html][UART通信协议]].
*** Studied the codes from our assistant
+ [[https://github.com/sxtyzhangzk/mips-cpu/blob/master/src/cpu/uart_comm.v][uart_comm.v]]
+ [[https://github.com/sxtyzhangzk/mips-cpu/blob/master/src/cpu/fifo.v][fifo.v]]
* <2018-01-05 Fri>
** Finish the [[file:Source/adapter.hpp][adapter.hpp]].
*** My data transferring rules(Reducing the transferring bit):
**** Reading data
I would need 5 bytes. The 7th bit in first is the reading flag 0. Then I need 32 bits to present the address. There would be 7 bits left which I would fill them with 0.
**** Writing data
I would need 9 bytes. The 7th bit in first is the writing flag 0. Then I need 32 bits to present the address. Then 4 bits to show the writing mask. Next, 32 bits to show the writing data. There would be 3 bits left which I would fill them with 0.
** Add the branch predictor.
** Fixed the bugs in branch instructions.
* <2018-01-06 Sat>
** Found that my CPU can hardly finish.
*** Found some problem in communication between FPGA and computer.
+ I had to connect wire to [[file:Source/CPU/uart_comm.v][uart_comm.v]] using my own rules.
+ If I need to write data to memory, I had to transfer 9 bytes, but my buffer had only 8 bytes, which meaned I had to expand it.
+ If I didn't have a cache, I found that I couldn't handle instruction fetch and load and store at the same time, as I had only one uart_comm protocol, which is called Structual Hazard.
+ If I had implemented a cache, I had to improve my stall method, which seemed to contradict to each other if added cache.
*** Copied a [[https://github.com/sxtyzhangzk/mips-cpu/blob/master/src/cpu/cache.v][cache]] from our assistant, but I found I could understand his code, which resulted in that I couldn't connect wires normally.
